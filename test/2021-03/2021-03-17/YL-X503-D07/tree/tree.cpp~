#include<bits/stdc++.h>

using namespace std;

#define REP(i, a, b) for ( int i = (a), _end_ = (b); i <= _end_; ++ i ) 
#define mem(a) memset ( (a), 0, sizeof(a) ) 
#define str(a) strlen ( a ) 
#define pii pair<int, int>
#define int long long

const int maxn = 2010;
const int Mod = 998244353;

int n, Begin[maxn], Next[maxn], To[maxn], e, r[maxn], fac[maxn];
int f[maxn][maxn], dfn[maxn], tot, id[maxn], size[maxn];

inline void add(int u, int v) { To[++ e] = v; Next[e] = Begin[u]; Begin[u] = e; } 

inline void DFS(int u)
{
	dfn[u] = ++ tot; id[tot] = u; size[u] = 1;
	for ( int i = Begin[u]; i; i = Next[i] ) 
	{
		int v = To[i]; DFS(v); 
		size[u] += size[v];
	}
}

namespace Subtask1
{
	const int maxn = 1e5 + 10;

	int deg[maxn], m, fac[maxn];
	vector<int> a[maxn];

	inline void NTT(vector<int> &a, int inv)
{
    int n = a.size(); vector<unsigned long long> f(n); 
    REP(i, 0, n - 1) f[i] = a[i];
    REP(i, 0, n - 1) r[i] = (r[i >> 1] >> 1) | ((i & 1) ? (n >> 1) : 0);
    REP(i, 0, n - 1) if ( i < r[i] ) swap(f[i], f[r[i]]);
    buf[0]=1;
    for ( int Mid = 1; Mid < n; Mid <<= 1 ) 
    {
        int tmp = power(3, (MOD - 1) / (Mid << 1), MOD);
        if ( inv == -1 ) tmp = power(tmp, MOD - 2, MOD); 
        for(int i=Mid;i>0;i-=2)buf[i]=buf[i>>1];
        for(int i=1;i<Mid;i+=2)buf[i]=1ll * buf[i-1]*tmp%MOD;
        for ( int i = 0; i < n; i += (Mid << 1) ) 
        {
            int sum = 1;
            for ( int j = 0; j < Mid; ++ j) 
            {
                unsigned long long x = f[i + j], y = f[i + Mid + j] * buf[j] % MOD;
                f[i + j] = x + y; f[i + Mid + j] = x + MOD - y;
            }
        }
    }
    REP(i, 0, n - 1) f[i] %= MOD;
    if ( inv == -1 ) 
    {
        inv = power(n, MOD - 2, MOD); 
        REP(i, 0, n - 1) f[i] = f[i] * inv % MOD;
    }
    REP(i, 0, n - 1) a[i] = f[i] % MOD;
}
 
inline vector<int> operator * (vector<int> a, vector<int> b)
{
    int n = a.size(), m = b.size(), len = 1; 
    REP(i, 0, n - 1) a[i] = (a[i] + Mod) % Mod;
    REP(i, 0, m - 1) b[i] = (b[i] + Mod) % Mod;
    while ( len < n + m - 1 ) len <<= 1; a.resize(len); b.resize(len);
    NTT(a, 1); NTT(b, 1); REP(i, 0, len - 1) a[i] = 1ll * a[i] * b[i] % MOD; NTT(a, -1);
    a.resize(n + m - 1); REP(i, 0, n + m - 2) a[i] = a[i] % Mod; return a;
}

	inline vector<int> Solve(int l, int r)
	{
		if ( l == r ) return a[l];
		int Mid = l + r >> 1;
		return Solve(l, Mid) * Solve(Mid + 1, r);
	}

	inline int main()
	{
		fac[0] = 1; REP(i, 1, n) fac[i] = fac[i - 1] * i % Mod;
		REP(i, 2, n) { int x; scanf("%d", &x); ++ deg[x]; } 
		REP(i, 1, n) if ( deg[i] ) { a[++ m].resize(deg[i] + 1); a[m][0] = a[m][deg[i]] = 1; } 
		vector<int> b = Solve(1, m); b.resize(n + 1);
		REP(i, 1, n) ans = (ans + b[i] * r[i] % Mod * fac[i]) % Mod;
		printf("%lld\n", (ans + Mod) % Mod);
		return 0;
	}
}

signed main()
{
	freopen("tree.in", "r", stdin);
	freopen("tree.out", "w", stdout);
	scanf("%lld", &n); 
	if ( n > 2000 ) return Subtask1 :: main();
	REP(i, 2, n) { int x; scanf("%lld", &x); add(x, i); } 
	fac[0] = 1; REP(i, 1, n) fac[i] = fac[i - 1] * i % Mod;
	REP(i, 1, n) scanf("%lld", &r[i]);
	DFS(1); f[1][0] = 1;
	REP(i, 1, n) REP(j, 0, n)
	{
		int u = id[i];
		if ( size[u] != 1 ) f[i + 1][j] = (f[i + 1][j] + f[i][j]) % Mod;
		f[i + size[u]][j + 1] = (f[i + size[u]][j + 1] + f[i][j]) % Mod;
	}
	int ans = 0;
	REP(i, 1, n) ans = (ans + r[i] * f[n + 1][i] % Mod * fac[i]) % Mod;
	printf("%lld\n", (ans + Mod) % Mod);
	return 0;
}
